services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: contentsyndicate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d
    ports:
      - "0.0.0.0:5432:5432"  # Bind to all interfaces
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "0.0.0.0:6379:6379"  # Bind to all interfaces
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5  # Main application
  app:
    build: .
    ports:
      - "0.0.0.0:8000:8000"  # Bind to all interfaces
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contentsyndicate
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - GOOGLE_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # Frontend Next.js application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:3000:3000"  # Bind to all interfaces
    environment:
      - NODE_ENV=production
      # Updated with your actual machine IP
      - NEXT_PUBLIC_API_URL=http://192.168.10.139:8000
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Celery worker for background tasks
  celery:
    build: .
    command: celery -A app.celery_app worker --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contentsyndicate
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - GOOGLE_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    command: celery -A app.celery_app beat --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/contentsyndicate
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - GOOGLE_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
